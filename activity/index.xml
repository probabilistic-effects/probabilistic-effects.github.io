<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Activity on Probabilistic Effects.  λθ</title>
    <link>https://probabilistic-effects.github.io/activity/</link>
    <description>Recent content in Activity on Probabilistic Effects.  λθ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Nov 2020 13:52:51 +0000</lastBuildDate><atom:link href="https://probabilistic-effects.github.io/activity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPSing Monad Bayes</title>
      <link>https://probabilistic-effects.github.io/activity/cpsing-monad-bayes/</link>
      <pubDate>Fri, 13 Nov 2020 14:05:41 +0000</pubDate>
      
      <guid>https://probabilistic-effects.github.io/activity/cpsing-monad-bayes/</guid>
      <description>Implemented and integrated CPS version of StateT monad into monad-bayes:  type State s = StateT s Identity {-# INLINE state #-} state :: Monad m =&amp;gt; (s -&amp;gt; (a, s)) -&amp;gt; StateT s m a state f = StateT (\s k -&amp;gt; uncurry k (f s)) {-# INLINE runState #-} runState :: State s a -&amp;gt; s -&amp;gt; (a, s) runState mx = runIdentity . runStateT mx {-# INLINE evalState #-} evalState :: State s a -&amp;gt; s -&amp;gt; a evalState mx = runIdentity .</description>
    </item>
    
    <item>
      <title>Inlining Monad Bayes</title>
      <link>https://probabilistic-effects.github.io/activity/inlining-monad-bayes/</link>
      <pubDate>Fri, 13 Nov 2020 14:05:41 +0000</pubDate>
      
      <guid>https://probabilistic-effects.github.io/activity/inlining-monad-bayes/</guid>
      <description>Original benchmark, using a data file containing 500 data points:  scoreModel :: MonadInfer m =&amp;gt; LatentState -&amp;gt; [ObservedState] -&amp;gt; Params -&amp;gt; m Params scoreModel latentState observedStates params = do let observe n p y = score (binomialPdf n p y) go [] x = return x go (y:ys) x = do x&amp;#39; &amp;lt;- transitionModel params x observe (getLat x&amp;#39;) ((fromIntegral $ getLat x&amp;#39;) * (observation_p params)) y go ys x&amp;#39; (go $!</description>
    </item>
    
  </channel>
</rss>
